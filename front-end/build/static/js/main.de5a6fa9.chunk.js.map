{"version":3,"sources":["components/providers/TypingSettingsContext.jsx","components/providers/TypingStatsContext.jsx","components/providers/TypingInputContext.jsx","components/TTTCharacter.jsx","lib/trainingModeUtils.js","lib/generateNewTTT.js","components/providers/CurrentTTTContext.jsx","components/TypingArea.jsx","components/StatsArea.jsx","components/Tab.jsx","components/Tabs.jsx","components/SettingsArea.jsx","components/Header.jsx","components/App.js","serviceWorker.js","index.js"],"names":["TypingSettingsContext","React","createContext","difficulty","TTTLength","trainingMode","maxCharsFromError","changeDifficulty","setTTTLength","TypingSettingsProvider","children","useState","setDifficulty","useCallback","event","value","difficultyText","console","log","Provider","TypingStatsContext","WPM","mistypedChars","accuracy","wastedKeys","getWorstChar","incrementWastedKeys","newMistypedChar","calcTypingSpeed","calcCharSpeed","unPauseUpdate","wastedKeysPercentage","updateAccuracyPercentage","updateWastedKeysPercentage","newTTTReset","errorIndexes","TTTStartTime","TypingStatsProvider","setWPM","setAccuracy","setWastedKeys","setWastedKeysPercentage","setMistypedChars","characterSpeeds","setCharacterSpeeds","averageCharSpeeds","setAverageCharSpeeds","lastCharTime","setLastCharTime","useEffect","newAverageCharSpeeds","Object","keys","forEach","char","thisAverage","totalTime","timesTyped","_","set","JSON","stringify","slowestCharVal","slowestCharKey","pauseDuration","prev","insertCharacterSpeed","time","newCharacterSpeeds","oldCharObj","newCharObj","correctChar","totalRealCharacters","errorIndex","push","newMistypedChars","totalMistypedChars","reduce","total","totalCharactersTyped","old","realCurrentIndex","Date","now","timeDiff","Math","abs","words","minutes","floor","String","fromCharCode","curTime","length","TypingInputContext","hiddenInput","colorList","isPaused","currentTTTStatus","pause","unPause","handleInput","handleKeyDown","changeAutoPauseTime","getCurrentTTT","pauseOverlayDisplay","currentCharIndex","totalKeyPresses","correctlyTypedChars","errorState","barrierState","startPause","tempColorList","prevCurrentTTT1","prevCurrentTTT2","prevIsPaused1","prevKeyPressTrigger1","getClassNamesFromColor","color","textOrBackground","TypingInputProvider","currentSettings","useContext","currentStats","autoPauseTime","setAutoPauseTime","hiddenInputVal","setHiddenInputVal","setIsPaused","currentKey","setCurrentKey","keyPressTrigger","setKeyPressTrigger","currentTTT","setCurrentTTT","bg","text","setColorList","updateColorList","customTTT","newColorList","map","index","newTTT","setCurrentColor","bgColor","textColor","setAllColor","newPauseTimer","totalKeyPressesBeforeTimeout","setTimeout","endTTT","target","current","key","preventDefault","handleTypingEventByType","eventType","parseInt","detectTypingEventType","clearInterval","TTTCharacter","props","className","getPriorityList","currentTrainingMode","getNewRandomCharacter","probabilityList","random","applyDifficulty","spaceModifier","smallestValue","character","medChars","i","hardChars","includes","getModifier","globalModifier","round","generateNewTTT","priorityList","modifiedPriorityList","charCode","nextTTT","currentWordLength","lastChar","newChar","CurrentTTTContext","CurrentTTTProvider","typingSettingsContext","typingInputContext","initialNewTTT","prevPauseTrigger","TypingArea","hiddenInputRef","useRef","setPauseOverlayDisplay","finishedOverlayDisplay","setFinishedOverlayDisplay","focus","document","activeElement","blur","pauseTrigger","ClickAwayListener","onClickAway","onKeyDown","id","type","style","opacity","onChange","onBlur","onFocus","disabled","ref","display","onClick","StatsArea","typingStatsContext","statsContext","inputContext","a","Tab","label","this","activeTab","Component","Tabs","onClickTabItem","tab","setState","state","child","difficultySliderMarks","autoPauseSliderMarks","TTTLengthSliderMarks","valuetext","useStyles","makeStyles","root","width","overflow","markLabel","top","track","backgroundColor","height","thumb","boxShadow","rail","mark","SettingsArea","setValue","classes","newValue","Slider","defaultValue","getAriaValueText","aria-labelledby","step","max","min","valueLabelDisplay","marks","e","val","Header","href","App","triggerTypingPause","setTriggerTypingPause","tabIndex","Paper","elevation","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.de5a6fa9.chunk.js","sourcesContent":["import React, {useState, useEffect, useCallback} from 'react';\r\n\r\n//initialize state structure here\r\nexport const TypingSettingsContext = React.createContext({\r\n    difficulty: '',\r\n    TTTLength: 0,\r\n    trainingMode: '',\r\n    maxCharsFromError: 0,\r\n    changeDifficulty: ()=>{},\r\n    setTTTLength: ()=> {},\r\n});\r\n\r\n\r\nexport default function TypingSettingsProvider({children}) {\r\n    const [difficulty, setDifficulty] = useState('easy');\r\n    const [TTTLength, setTTTLength] = useState(150);\r\n    const [trainingMode, setTrainingMode] = useState('Special Characters Emphasis');\r\n    const [maxCharsFromError, setMaxCharsFromError] = useState(8);\r\n\r\n    const changeDifficulty = useCallback((event, value) => {\r\n        let difficultyText = '';\r\n        switch (value) {\r\n            case 0:\r\n                difficultyText = 'veryEasy';\r\n                break;\r\n            case 1:\r\n                difficultyText = 'easy';\r\n                break;\r\n            case 2:\r\n                difficultyText='medium';\r\n                break;\r\n            case 3:\r\n                difficultyText='hard';\r\n                break;\r\n            default:\r\n                console.log('difficulty slider is out of allowed range');\r\n                return;\r\n        }\r\n        setDifficulty(difficultyText);\r\n    },[]);\r\n    \r\n  \r\n    return (\r\n    <TypingSettingsContext.Provider\r\n        value={{\r\n            difficulty: difficulty,\r\n            TTTLength: TTTLength,\r\n            trainingMode: trainingMode,\r\n            maxCharsFromError: maxCharsFromError,\r\n            changeDifficulty: changeDifficulty,\r\n            setTTTLength: setTTTLength,\r\n        }\r\n        }\r\n    >\r\n        {children}\r\n    </TypingSettingsContext.Provider>\r\n    );\r\n}\r\n\r\n\r\n\r\n","import React, { useState, useEffect, useCallback } from 'react';\r\nimport _ from 'lodash'\r\n\r\n//initialize state structure here\r\nexport const TypingStatsContext = React.createContext({\r\n    WPM: 0,\r\n    mistypedChars: 0,\r\n    accuracy: 0,\r\n    wastedKeys: 0,\r\n    getWorstChar: ()=> {},\r\n    incrementWastedKeys: () => { },\r\n    newMistypedChar: () => { },\r\n    calcTypingSpeed: () => { },\r\n    calcCharSpeed: () => { },\r\n    unPauseUpdate: ()=> {},\r\n    wastedKeysPercentage: ()=> {},\r\n    updateAccuracyPercentage: ()=> {},\r\n    updateWastedKeysPercentage: ()=> {},\r\n    newTTTReset: ()=> {},\r\n    errorIndexes: [],\r\n});\r\n\r\nlet TTTStartTime = null;\r\nlet errorIndexes = [];\r\n\r\n\r\nexport default function TypingStatsProvider({ children }) {\r\n    const [WPM, setWPM] = useState(0);\r\n    const [accuracy, setAccuracy] = useState(100);\r\n    const [wastedKeys, setWastedKeys] = useState(0);\r\n    const [wastedKeysPercentage, setWastedKeysPercentage] = useState(0);\r\n    const [mistypedChars, setMistypedChars] = useState({});\r\n    const [characterSpeeds, setCharacterSpeeds] = useState({\r\n    });// structure {char: {totalTime: , timesTyped: }, ...}\r\n    const [averageCharSpeeds, setAverageCharSpeeds] = useState({\r\n    }); \r\n    const [lastCharTime, setLastCharTime] = useState(null);\r\n   \r\n    //non state variables\r\n\r\n    //udpate average character speeds\r\n    useEffect(()=> {\r\n        // console.log('useeffect for updating ave char speeds');\r\n        let newAverageCharSpeeds = {};\r\n        Object.keys(characterSpeeds).forEach(\r\n            char => {\r\n            const thisAverage = (characterSpeeds[char].totalTime/characterSpeeds[char].timesTyped*1.0);\r\n            _.set(newAverageCharSpeeds,char,thisAverage);\r\n            }\r\n        );\r\n        setAverageCharSpeeds(newAverageCharSpeeds);\r\n\r\n    }, [JSON.stringify(characterSpeeds), characterSpeeds])\r\n\r\n    const getWorstChar = useCallback(() => {\r\n        let slowestCharVal = 0;\r\n        let slowestCharKey = '';\r\n        Object.keys(averageCharSpeeds).forEach(char => {\r\n            if (slowestCharVal < averageCharSpeeds[char]) {\r\n                slowestCharKey = char;\r\n                slowestCharVal = averageCharSpeeds[char];\r\n            }\r\n        }\r\n        );\r\n        return slowestCharKey;        \r\n    }, [averageCharSpeeds]);\r\n\r\n    const unPauseUpdate = useCallback((pauseDuration) => {\r\n        TTTStartTime = TTTStartTime + pauseDuration;\r\n        setLastCharTime(prev => prev + pauseDuration);\r\n    },[]);\r\n\r\n    const insertCharacterSpeed = useCallback((char, time) => {\r\n        //this function adds the total time taken to type each character to that character's\r\n        //spot in the characterSpeeds object, as well as the total times typed, for average calculationns\r\n        const newCharacterSpeeds = characterSpeeds;\r\n        const oldCharObj = newCharacterSpeeds[char]?newCharacterSpeeds[char]:{};\r\n        const newTotalTime = time + (oldCharObj.totalTime?oldCharObj.totalTime:0);\r\n        const newTimesTyped = 1 + (oldCharObj.timesTyped?oldCharObj.timesTyped:0);\r\n        const newCharObj = {totalTime: newTotalTime, timesTyped: newTimesTyped};\r\n        _.set(newCharacterSpeeds, char, newCharObj); \r\n        setCharacterSpeeds(newCharacterSpeeds);\r\n    },[characterSpeeds]);\r\n\r\n    const newMistypedChar = useCallback((correctChar, totalRealCharacters, errorIndex) => {\r\n        errorIndexes.push(errorIndex);\r\n        let newMistypedChars = mistypedChars;\r\n        _.set(newMistypedChars, correctChar, mistypedChars[correctChar] ? mistypedChars[correctChar] + 1 : 1);\r\n        const totalMistypedChars = Object.keys(newMistypedChars).reduce((total,char)=> total+newMistypedChars[char],0)\r\n        setAccuracy(100.0-(totalMistypedChars/(totalRealCharacters/100.0)));  \r\n        setMistypedChars(newMistypedChars);\r\n    },[mistypedChars]);\r\n    const updateAccuracyPercentage = useCallback((totalRealCharacters) => {\r\n        const totalMistypedChars = Object.keys(mistypedChars).reduce((total,char)=> total+mistypedChars[char],0)\r\n        // console.log('update accuracy: ', totalMistypedChars, totalRealCharacters);\r\n        setAccuracy(100.0-(totalMistypedChars/(totalRealCharacters/100.0)));\r\n    },[mistypedChars])\r\n    const incrementWastedKeys = useCallback((totalCharactersTyped) => {\r\n        setWastedKeysPercentage((wastedKeys+1)/(totalCharactersTyped/100));\r\n        setWastedKeys(old => old+ 1);\r\n    },[wastedKeys]);\r\n\r\n    const updateWastedKeysPercentage = useCallback((totalCharactersTyped) => {\r\n        setWastedKeysPercentage((wastedKeys)/(totalCharactersTyped/100));\r\n    },[wastedKeys]);\r\n    const calcTypingSpeed = useCallback((realCurrentIndex) => {\r\n        //5 characters, in this case significant, required keystrokes (if backspace is required than it counts)\r\n        //counts as one 'word' in the wpm calculation\r\n        //the calculation starts when the first letter is successfully typed, this time is recorded and used\r\n        //to calculate time elapsed after each 5 successfull characters\r\n\r\n        //detecti if this is the first correct key press? if so initialize the starttime variable\r\n        if (TTTStartTime === null) {\r\n            TTTStartTime = Date.now();\r\n        }\r\n        //(current real index / 5 = words) / time since start in minutes\r\n        let timeDiff = Math.abs(Date.now() - TTTStartTime);\r\n\r\n        //to avoid using async, add one to time diff if it equals zero\r\n        if (timeDiff === 0) { timeDiff = 1 };\r\n        const words = realCurrentIndex / 5.0;\r\n        const minutes = timeDiff / 60000.0;\r\n        setWPM(Math.floor(words / minutes));\r\n    },[]);\r\n\r\n    const calcCharSpeed = useCallback((char) => {\r\n        // if char input is a character code, convert it to string\r\n        if (typeof char === 'number') char = String.fromCharCode(char);\r\n\r\n        const curTime = Date.now();\r\n        //handle the first character typed\r\n        if (lastCharTime === null) {\r\n            //set the lastCharTime to the current time\r\n            setLastCharTime(curTime);\r\n            //do not alter the charSpeed object, since the speed for the first char is \r\n            //always unknown\r\n            return;\r\n        }\r\n        //handle all characters after the first\r\n        insertCharacterSpeed(char, (curTime - lastCharTime))\r\n        setLastCharTime(curTime);\r\n    },[lastCharTime, insertCharacterSpeed]);\r\n    const newTTTReset = useCallback(() => {\r\n        setWPM(0);\r\n        setAccuracy(100);\r\n        setWastedKeys(0);\r\n        setWastedKeysPercentage(0);\r\n        setMistypedChars({});\r\n        setCharacterSpeeds({});\r\n        setAverageCharSpeeds({});\r\n        setLastCharTime(null);\r\n        TTTStartTime = null;\r\n        errorIndexes.length = 0;\r\n        // console.log('done stats reset');\r\n    }, []);\r\n    return (\r\n        <TypingStatsContext.Provider\r\n            value={{\r\n                WPM: WPM,\r\n                accuracy: accuracy,\r\n                wastedKeys: wastedKeys,\r\n                getWorstChar: getWorstChar,\r\n                incrementWastedKeys: incrementWastedKeys,\r\n                newMistypedChar: newMistypedChar,\r\n                calcCharSpeed: calcCharSpeed,\r\n                calcTypingSpeed: calcTypingSpeed,\r\n                unPauseUpdate: unPauseUpdate,\r\n                wastedKeysPercentage: wastedKeysPercentage,\r\n                updateAccuracyPercentage: updateAccuracyPercentage,\r\n                updateWastedKeysPercentage: updateWastedKeysPercentage,\r\n                newTTTReset: newTTTReset,\r\n                errorIndexes:errorIndexes,\r\n            }\r\n            }\r\n        >\r\n            {children}\r\n        </TypingStatsContext.Provider>\r\n    );\r\n}\r\n\r\n\r\n\r\n","import React, {useState, useEffect,useCallback} from 'react';\r\nimport { useContext } from 'react';\r\nimport { TypingSettingsContext } from './TypingSettingsContext';\r\nimport { TypingStatsContext } from './TypingStatsContext';\r\n\r\n//initialize state structure here\r\nexport const TypingInputContext = React.createContext({\r\n\r\n    //when either the hidden input onchange is fired or the correct type of keydown event\r\n    //then this component should detect the type of event that occured and update the ui and \r\n    //data accordingly\r\n\r\n    //when typing is paused or unpaused update the ui and stats data accordingly\r\n\r\n    hiddenInput: null,\r\n    colorList: {},\r\n    isPaused: null,\r\n    currentTTTStatus: null,\r\n    pause: ()=>{},\r\n    unPause: ()=>{},\r\n    handleInput: ()=>{},\r\n    handleKeyDown: ()=>{},\r\n    newTTTReset: ()=>{},\r\n    changeAutoPauseTime: ()=>{},\r\n    getCurrentTTT: ()=>{},\r\n});\r\n\r\nlet pauseOverlayDisplay = 'none'; //either none or block\r\nlet finishedOverlayDisplay = 'none';\r\nlet currentTTTStatus = 'not-started';\r\nlet currentCharIndex = 0;\r\nlet totalKeyPresses = 0;\r\nlet correctlyTypedChars = {};\r\nlet errorState = 0;\r\nlet barrierState = false;\r\nlet errorIndex = null;\r\nlet startPause = null;\r\nlet endPause = null;\r\nlet tempColorList = [];\r\nlet prevCurrentTTT1 = null;\r\nlet prevCurrentTTT2 = null;\r\nlet prevIsPaused1 = null;\r\nlet prevKeyPressTrigger1 = null;\r\n\r\n\r\nconst getClassNamesFromColor = (color, textOrBackground) => {\r\n    if (textOrBackground === 'bg') {\r\n        switch (color) {\r\n            case ('white' || 'default'):\r\n                return 'white';\r\n            case 'red':\r\n                return 'red';\r\n            case 'green':\r\n                return 'green';\r\n            case 'grey':\r\n                return 'grey';\r\n            default:\r\n                return 'white';\r\n        }\r\n    }\r\n    if (textOrBackground === 'text') {\r\n        switch(color) {\r\n            case ('normal' || 'default'|| 'unfade'):\r\n                return 'blackText';\r\n            case 'fade':\r\n                return 'greyText';\r\n            default:\r\n                return 'blackText';\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default function TypingInputProvider({children}) {\r\n    const currentSettings = useContext(TypingSettingsContext);\r\n    const currentStats = useContext(TypingStatsContext);\r\n    \r\n    const [autoPauseTime, setAutoPauseTime] = useState(10000);\r\n    const [hiddenInputVal, setHiddenInputVal] = useState('');\r\n    const [isPaused, setIsPaused] = useState(null);\r\n    const [currentKey, setCurrentKey]= useState(null);\r\n    const [keyPressTrigger, setKeyPressTrigger] = useState(0);\r\n    const [currentTTT, setCurrentTTT] = useState([]);\r\n    const [colorList, setColorList] = useState({bg:[getClassNamesFromColor('green','bg')],text:[getClassNamesFromColor('default','text')]});\r\n    tempColorList = colorList;\r\n\r\n    const updateColorList =useCallback((customTTT = currentTTT) =>{\r\n        if (!customTTT) return;\r\n        const newColorList ={\r\n            bg:customTTT.map((char,index) => index===0?getClassNamesFromColor('green', 'bg'):getClassNamesFromColor('default', 'bg')),\r\n            text:customTTT.map((char,index) => getClassNamesFromColor('default', 'text')),\r\n        };\r\n        setColorList(newColorList);\r\n        tempColorList = newColorList;\r\n    },[currentTTT]);\r\n    const getCurrentTTT = useCallback((newTTT)=>{\r\n        // console.log('setting current ttt in typinginputcontext, colorlist is : ', colorList)\r\n        updateColorList(newTTT);\r\n        setCurrentTTT(newTTT);\r\n    },[colorList, updateColorList]);\r\n\r\n    //whenever TTT updates reset the colorlist\r\n    useEffect(()=>{\r\n        if (prevCurrentTTT1 === currentTTT) return;\r\n        if (!currentTTT || !currentTTT.length) return;\r\n        // console.log('useEffect current TTT update, set colorList', currentTTT)\r\n        updateColorList();\r\n        prevCurrentTTT1 = currentTTT;\r\n    },[currentTTT, updateColorList])\r\n    //first characters color should start as green\r\n\r\n    const setCurrentColor = useCallback((bgColor = null, textColor=null, index) => {\r\n        // console.log('setting current color ', bgColor, textColor, index);\r\n        bgColor = bgColor?getClassNamesFromColor(bgColor, 'bg'): null;\r\n        textColor = textColor? getClassNamesFromColor(textColor, 'text'):null;\r\n        let newColorList = {\r\n        bg: [...tempColorList.bg], \r\n        text: [...tempColorList.text], \r\n        }\r\n        if (bgColor) {\r\n            newColorList.bg[index] = bgColor\r\n        }\r\n        if (textColor) {\r\n            newColorList.text[index] = textColor\r\n        }\r\n        tempColorList = newColorList;\r\n    },[] );\r\n    const setAllColor= useCallback( (bgColor = null, textColor=null) => {\r\n        tempColorList = colorList;\r\n        // console.log('setting all color; bg color',bgColor, 'text color', textColor, 'colorlist', tempColorList);\r\n        bgColor = bgColor?getClassNamesFromColor(bgColor, 'bg'): null;\r\n        textColor = textColor? getClassNamesFromColor(textColor, 'text'):null;\r\n        //retain current values if new value isn't specified\r\n        let newColorList = {\r\n            bg: tempColorList.bg.map(color => bgColor?bgColor:color),\r\n            text: tempColorList.text.map(color => textColor?textColor:color),\r\n        }\r\n        tempColorList = newColorList;\r\n    },[colorList, ]);\r\n    const newPauseTimer = useCallback((totalKeyPressesBeforeTimeout) => {\r\n        setTimeout(() => {\r\n        // console.log('autopause timer done:', totalKeyPressesBeforeTimeout, totalKeyPresses);\r\n        if (totalKeyPressesBeforeTimeout === totalKeyPresses){\r\n            // console.log('pausing due to timeout');\r\n            pause();\r\n        }\r\n        return;\r\n        }\r\n        ,autoPauseTime\r\n        );\r\n    }, [autoPauseTime,]);\r\n\r\n    const changeAutoPauseTime = useCallback((event, value) => {\r\n        setAutoPauseTime(value);\r\n    },[]);\r\n\r\n    //run these changes whenever isPaused changes:\r\n    useEffect(\r\n        () => {\r\n            if (prevIsPaused1 === isPaused) return;\r\n            if(isPaused === true) {\r\n                // console.log('useeffect, detected pause');\r\n                pauseOverlayDisplay = 'block';\r\n                // setAllColor(null, 'fade');\r\n                startPause = new Date();\r\n                setColorList(tempColorList);\r\n                prevIsPaused1 = isPaused;\r\n            }\r\n            if (isPaused === false) {\r\n                // console.log('useeffect, detected unpause');\r\n                pauseOverlayDisplay = 'none';\r\n                // setAllColor(null, 'unfade');\r\n                //stats related stuff:\r\n                //only do this if the TTT was already active\r\n                if (currentTTTStatus !== 'not-started') {\r\n                    //record end of pause period\r\n                    endPause = new Date();\r\n                    //colculate total duration of the pause\r\n                    let pauseDuration = endPause-startPause;\r\n                    //remove 10 miliseconds from pauseDuration just incase there is any async issues\r\n                    //or the code is excecuting so fast that it sets startTime and lastCharTime to 0\r\n                    //below...\r\n                    pauseDuration += 10;\r\n                    currentStats.unPauseUpdate(pauseDuration);\r\n                }\r\n                setColorList(tempColorList);\r\n                prevIsPaused1 = isPaused;\r\n            }\r\n            return;\r\n        }\r\n        , [isPaused, currentStats, setAllColor]\r\n    )\r\n    const pause = useCallback(() => {\r\n         // dont fire if status is finished\r\n         if (currentTTTStatus === 'finished') return;\r\n         setIsPaused(true);\r\n    },[]);\r\n    const unPause = useCallback(() => {\r\n        //don't fire at the begging of the app loading\r\n        if (isPaused=== null) return;\r\n        // dont fire if status is finished\r\n        if (currentTTTStatus === 'finished') return;\r\n        setIsPaused(false);    \r\n    },[isPaused]);\r\n    const endTTT = useCallback(()=>{\r\n        // console.log('current TTT finished');\r\n        currentTTTStatus = 'finished';\r\n        //color in all errors red\r\n        currentStats.errorIndexes.forEach(errorIndex => {\r\n            setCurrentColor('red',null,errorIndex);\r\n        })\r\n\r\n    },[setCurrentColor, currentStats.errorIndexes]);\r\n    const handleInput = useCallback((event) => {\r\n        //clear the input box so only individual characters are returned from the input event\r\n        setCurrentKey(event.target.value);\r\n        setKeyPressTrigger(current => current+1);\r\n    },[]);\r\n    const handleKeyDown = useCallback((event) => {\r\n        //focus is assumed to be within input area, this should not fire otherwise\r\n        const key = event.key\r\n        //detect backspace event and handle it\r\n        if(key ==='Backspace'){\r\n        setCurrentKey(key);\r\n        setKeyPressTrigger(current => current+1);\r\n        }\r\n        //detect tab event and prevent it from shifting focus away from input box\r\n        if(key==='Tab'){\r\n        event.preventDefault();\r\n        }\r\n    },[]);\r\n    //fire when keyTrigger Changes or currentTTT changes\r\n    useEffect ( () => {\r\n\r\n        //check that either key trigger or current TTT has changed\r\n        if (prevKeyPressTrigger1 === keyPressTrigger && prevCurrentTTT2 === currentTTT) return;\r\n        //only fire if currentKey has changed and index has changed (incase two identical keys)\r\n        if (currentKey===null || keyPressTrigger === 0) return;\r\n        totalKeyPresses ++;\r\n\r\n        // console.log('currentkey useeffect :', currentKey);\r\n        const handleTypingEventByType = (eventType) => {\r\n            let realCurrentIndex = errorIndex?errorIndex-1:currentCharIndex;\r\n            // console.log(eventType);\r\n            switch (eventType) {\r\n                case 'correct':\r\n                    //TODO\r\n                    currentStats.calcTypingSpeed(realCurrentIndex);\r\n                    //TODO\r\n                    currentStats.calcCharSpeed(currentKey);\r\n                    //update correctlyTyped list\r\n                    correctlyTypedChars[currentKey] = (correctlyTypedChars[currentKey]?correctlyTypedChars[currentKey]+1:1);\r\n                    currentStats.updateWastedKeysPercentage(totalKeyPresses);\r\n                    currentStats.updateAccuracyPercentage((errorState>0)?realCurrentIndex+2:realCurrentIndex+1);\r\n                    //correct key press> current key white, move forward one, next key green\r\n                    setCurrentColor('white',null, currentCharIndex);\r\n                    currentCharIndex ++;\r\n                    //detect if we are at the end of the text and if so stop listening for keypresses and exit\r\n                    //also make sure we are not running this before the session has even started\r\n                    //*ENd of TTT\r\n                    if (currentCharIndex >= currentTTT.length && currentTTT.length >1) {\r\n                        endTTT();\r\n                        break;\r\n                    }\r\n                    setCurrentColor('green',null, parseInt(currentCharIndex));\r\n                    break;\r\n                case 'incorrect':\r\n                    currentStats.incrementWastedKeys(totalKeyPresses);\r\n                    errorState = 1;\r\n                    errorIndex = currentCharIndex;\r\n                    realCurrentIndex = errorIndex?errorIndex-1:currentCharIndex;\r\n                    currentStats.newMistypedChar(currentTTT[currentCharIndex], (errorState>0)?realCurrentIndex+2:realCurrentIndex+1, errorIndex);\r\n                    //detect and set barrier state\r\n                    errorState > currentSettings.maxCharsFromError ? barrierState = true : barrierState = false;\r\n                    //incorrect key press> current key red, move forward one, next key grey\r\n                    setCurrentColor('red',null, currentCharIndex);\r\n                    currentCharIndex ++;\r\n                    setCurrentColor('grey', null, currentCharIndex);\r\n                    break;\r\n                case 'forward-error-state':\r\n                    currentStats.incrementWastedKeys(totalKeyPresses);\r\n                    //did we reach the maximum allowed chars from the error?\r\n                    if (errorState > currentSettings.maxCharsFromError) {\r\n                        //if so prevent userfrom doing anything but backspace\r\n                        barrierState = true;\r\n                        break;\r\n                    }\r\n                    errorState ++;\r\n                    //any key press except backspace during error state> move forward one, next key grey\r\n                    currentCharIndex ++;\r\n                     setCurrentColor('grey', null, currentCharIndex);\r\n                    break;\r\n                case 'forward-barrier-state':\r\n                    currentStats.incrementWastedKeys(totalKeyPresses);\r\n                    break;\r\n                case 'backspace-normal':\r\n                    currentStats.incrementWastedKeys(totalKeyPresses);\r\n                    //backspace with no error state> current key white, move back one, prev key green\r\n                    //first check if back at beginning of text, don't allow to go any further\r\n                    if (currentCharIndex ===0) return;\r\n                     setCurrentColor('white',null, currentCharIndex);\r\n                    currentCharIndex --;\r\n                     setCurrentColor('green', null, currentCharIndex);\r\n                    break;\r\n                case 'backspace-error-state':\r\n                    currentStats.incrementWastedKeys(totalKeyPresses);\r\n                    //reduce inErrorState Count, make barrier state false\r\n                    errorState --;\r\n                    barrierState = false;\r\n                    setCurrentColor('white',null,currentCharIndex);\r\n                    //if reached the error, remove the error index value\r\n                    //! \r\n                    if (currentCharIndex === errorIndex+1){\r\n                        errorIndex = null;\r\n                        errorState = 0;\r\n                        currentCharIndex --;\r\n                        setCurrentColor('green',null,currentCharIndex);\r\n                    }\r\n                    else {currentCharIndex --;}\r\n\r\n                    // if (currentCharIndex <= errorIndex) errorIndex = null;\r\n                    // //backspace with error state> current key white, move back one, prev one same color unless its red then it becomes green\r\n                    // setCurrentColor('white',null,currentCharIndex);\r\n                    // currentCharIndex --;\r\n                    // //detect if this was the original error, make it green\r\n                    // if (currentCharIndex === errorIndex)  setCurrentColor('green', null, currentCharIndex);\r\n                    break;\r\n                default: \r\n                    console.log('error, detectkeypresstype did not catch that behaviour');\r\n                    return;\r\n    \r\n            }\r\n            //set the new state once:\r\n            setColorList(tempColorList);\r\n        }\r\n        const detectTypingEventType =  () => {\r\n            //are we listening for input right now? *handle finished typing event\r\n            if (currentTTTStatus === 'finished') return;\r\n            //is the typing paused?\r\n            if (isPaused) return;\r\n            //set timer for autoPause\r\n            newPauseTimer(parseInt(totalKeyPresses));\r\n    \r\n            // variables for this function\r\n            const correctChar = currentTTT[currentCharIndex];\r\n            // console.log('correct char', correctChar, currentCharIndex, currentTTT)\r\n            //Case 1: correct\r\n            if (currentKey === correctChar && errorState < 1) {\r\n                handleTypingEventByType('correct');\r\n                return;\r\n            }\r\n            //Case 2: incorrect.... wrong key pressed, not backspace, and not already in an error state\r\n            if (currentKey !== correctChar && currentKey !== 'Backspace' && errorState < 1) {\r\n                handleTypingEventByType('incorrect');\r\n                return;\r\n            }\r\n            //Case 3: forward error state\r\n            if (errorState > 0 && barrierState === false && currentKey !== 'Backspace') {\r\n                handleTypingEventByType('forward-error-state');\r\n                return;\r\n            }\r\n            //Case 4: forward barrier state\r\n            if (barrierState === true && currentKey !== 'Backspace') {\r\n                handleTypingEventByType('forward-barrier-state');\r\n                return;\r\n            }\r\n            //Case 5: backspace normal\r\n            if (currentKey === 'Backspace' && errorState < 1 && barrierState === false) {\r\n                handleTypingEventByType('backspace-normal');\r\n                return;\r\n            }\r\n            //Case 6: backspace error state\r\n            if (currentKey === 'Backspace' && (errorState > 0 || barrierState === true)) {\r\n                handleTypingEventByType('backspace-error-state');\r\n                return;\r\n            }\r\n            console.log('error, detectkeypresstype did not catch that behaviour');\r\n        }\r\n        const callAll= () => {\r\n        // console.log('callAll, relevant key detected');\r\n        detectTypingEventType();\r\n        setHiddenInputVal('');\r\n        }\r\n        callAll();\r\n        prevCurrentTTT2 = currentTTT;\r\n        prevKeyPressTrigger1 = keyPressTrigger;\r\n        return function cleanup() {\r\n            //cleanup the setTimeout function for the autoPauseTimer\r\n            clearInterval(newPauseTimer);\r\n        }\r\n    },\r\n    [keyPressTrigger, currentTTT, currentKey, currentSettings.maxCharsFromError, currentStats, isPaused,\r\n    newPauseTimer, setAllColor, setCurrentColor, endTTT]);\r\n\r\n    const newTTTReset = useCallback(() => {\r\n        // console.log('currentSettings:', currentTTT);\r\n        setIsPaused(true);\r\n        setCurrentKey('');\r\n        setKeyPressTrigger(0);\r\n        setColorList({\r\n            bg:currentTTT.map((char,index) => index===0?getClassNamesFromColor('green', 'bg'):getClassNamesFromColor('default', 'bg')),\r\n            text:currentTTT.map((char,index) => getClassNamesFromColor('default', 'text')),\r\n        })\r\n        currentTTTStatus = 'not-started';\r\n        currentCharIndex = 0;\r\n        totalKeyPresses = 0;\r\n        correctlyTypedChars = {};\r\n        errorState = 0;\r\n        barrierState = false;\r\n        errorIndex = null;\r\n        startPause = null;\r\n        endPause = null;\r\n        tempColorList = [];\r\n        // console.log('done input');\r\n    },[currentTTT,]);\r\n    return (\r\n    <TypingInputContext.Provider\r\n        value={{\r\n            hiddenInputVal: hiddenInputVal,\r\n            colorList: colorList,\r\n            isPaused: isPaused,\r\n            pauseOverlayDisplay: pauseOverlayDisplay,\r\n            pause: pause,\r\n            unPause: unPause,\r\n            handleInput: handleInput,\r\n            handleKeyDown: handleKeyDown,\r\n            newTTTReset: newTTTReset,\r\n            changeAutoPauseTime: changeAutoPauseTime,\r\n            getCurrentTTT: getCurrentTTT,\r\n            currentTTTStatus: currentTTTStatus,\r\n        }\r\n        }\r\n    >\r\n        {children}\r\n    </TypingInputContext.Provider>\r\n    );\r\n}\r\n\r\n\r\n\r\n","import React, {useState, useCallback} from 'react';\r\nimport { useContext } from 'react';\r\nimport { TypingInputContext } from './providers/TypingInputContext';\r\nimport { useEffect } from 'react';\r\n\r\nexport default function TTTCharacter(props) {\r\n\r\nreturn (\r\n    <span className={props.className}>\r\n        {props.char}\r\n    </span>\r\n);\r\n}\r\n","export function getPriorityList (currentTrainingMode = 'Special Character Emphasis') {\r\n    //return an object with \r\n    //char codes as keys, and priority ratings (integers) as values\r\n    switch (currentTrainingMode) {\r\n        case 'Special Character Emphasis':\r\n            return {\"32\": 1, \"33\": 4, \"34\": 7, \"35\": 7, \"36\": 7, \"37\": 4, \"38\": 7,\r\n             \"39\": 7, \"40\": 10, \"41\": 10, \"42\": 7, \"43\": 4, \"44\": 10, \"45\": 7, \"46\": 10,\r\n              \"47\": 7, \"48\": 1, \"49\": 1, \"50\": 1, \"51\": 1, \"52\": 1, \"53\": 1, \"54\": 1,\r\n               \"55\": 1, \"56\": 1, \"57\": 1, \"58\": 7, \"59\": 7, \"60\": 7, \"61\": 7, \"62\": 7,\r\n                \"63\": 4, \"64\": 4, \"65\": 1, \"66\": 1, \"67\": 1, \"68\": 1, \"69\": 1, \"70\": 1,\r\n                 \"71\": 1, \"72\": 1, \"73\": 1, \"74\": 1, \"75\": 1, \"76\": 1, \"77\": 1, \"78\": 1,\r\n                  \"79\": 1, \"80\": 1, \"81\": 1, \"82\": 1, \"83\": 1, \"84\": 1, \"85\": 1, \"86\": 1,\r\n                   \"87\": 1, \"88\": 1, \"89\": 1, \"90\": 1, \"91\": 7, \"92\": 7, \"93\": 4, \"94\": 1,\r\n                    \"95\": 10, \"96\": 4, \"97\": 1, \"98\": 1, \"99\": 1, \"100\": 1, \"101\": 1, \"102\": 1,\r\n                     \"103\": 1, \"104\": 1, \"105\": 1, \"106\": 1, \"107\": 1, \"108\": 1, \"109\": 1, \"110\": 1,\r\n                      \"111\": 1, \"112\": 1, \"113\": 1, \"114\": 1, \"115\": 1, \"116\": 1, \"117\": 1, \"118\": 1,\r\n                       \"119\": 1, \"120\": 1, \"121\": 1, \"122\": 1, \"123\": 7, \"124\": 4, \"125\": 7, \"126\": 4};\r\n        default:\r\n            console.log('error in getPriorityList, invalid training mode string');\r\n            return;\r\n    }\r\n}","\r\nfunction getNewRandomCharacter(probabilityList){\r\n    const randomIndex = Math.floor(Math.random()*probabilityList.length);\r\n    return probabilityList[randomIndex];\r\n}\r\n\r\nfunction getModifier(character, difficulty){\r\n\r\n    // console.log('getting modifier')\r\n    //make character a number for comparison with these number lists:\r\n    character = parseInt(character);\r\n\r\n\r\n    //generate list of hard and very hard chars as ascii numbers\r\n    // there is no list for lowercase consonants, those are always default value of 1 modifier\r\n    //easy list is just lowercase vowels\r\n    let easyChars = [97,101,105,111,117];\r\n    //is just uppercase letters\r\n    let medChars = [];\r\n    for (let i = 65; i<91; i++){\r\n        medChars.push(i);\r\n    }\r\n    // inculdes !, \", and most special characters (except the really hard ones) and all numbers\r\n    let hardChars = [33,34];\r\n    for (let i = 39; i<64; i++){\r\n        hardChars.push(i);\r\n    }\r\n    //is just the most difficult special characters (depends on keyboard layout though)\r\n    let veryHardChars = [35,36,37,38,64,91,92,93,94,95,96,123,124,125,126];\r\n   \r\n    //check if character is in hardchars, voryhard, or medium list\r\n    //alters the frequency of its appearance based on the combination of \r\n    //which list it is in and the actual difficulty mode selected\r\n    //these ratios are set manually in the code here, for now\r\n    if (easyChars.includes(character)){\r\n        return difficulty === 'veryEasy'? 10:\r\n                difficulty === 'easy'? 5:\r\n                difficulty === 'medium'? 3:\r\n                difficulty === 'hard'? 1: null;\r\n    }\r\n    else if (medChars.includes(character)){\r\n        return difficulty === 'veryEasy'? 0.6:\r\n                difficulty === 'easy'? 1:\r\n                difficulty === 'medium' ? 0.8:\r\n                difficulty === 'hard' ? 1: null;\r\n    }\r\n    if (hardChars.includes(character)){\r\n       return difficulty === 'veryEasy'? 0.1:\r\n                difficulty === 'easy' ? 0.35:\r\n                difficulty === 'medium' ? 0.5:\r\n                difficulty === 'hard' ? 1: null; \r\n    }\r\n    else if (veryHardChars.includes(character)){\r\n        return difficulty === 'veryEasy'? 0.0005:\r\n                difficulty === 'easy' ? 0.005:\r\n                difficulty === 'medium' ? 0.2:\r\n                difficulty === 'hard' ? 1: null;\r\n    }\r\n   \r\n    else return 1;\r\n}\r\n\r\n\r\nexport function applyDifficulty(probabilityList, difficulty){\r\n        //!HACKY JOB HERE:\r\n        //!set space character to show up way more often than normal\r\n        let spaceModifier =10;\r\n        if (difficulty === 'veryEasy') spaceModifier = 15;\r\n        if (difficulty === 'medium') spaceModifier = 4;\r\n        if (difficulty === 'hard') spaceModifier = 2;\r\n        probabilityList[32] *= spaceModifier;\r\n\r\n        let smallestValue = 9999;\r\n\r\n        Object.keys(probabilityList).forEach(character => {\r\n                    //only apply this to characters that are enabled:\r\n                    if (probabilityList[character]>0){\r\n                        //! another hacky modification to make the difficulty less prominent, so that \r\n                        //! priority ratings are more important\r\n                    probabilityList[character] = probabilityList[character] * (getModifier(character,difficulty)*0.5);\r\n                    if (probabilityList[character] < smallestValue && probabilityList[character]) {\r\n                        smallestValue = probabilityList[character];\r\n                    }\r\n                    }\r\n        });\r\n\r\n        // find the smallest non-zero value in the list and multiply all list items so that the smallest value is at least 1\r\n        const globalModifier = 1.0 / smallestValue;\r\n        \r\n        Object.keys(probabilityList).forEach(character => {\r\n            probabilityList[character] = Math.round(probabilityList[character] *1.0 * globalModifier);\r\n        } \r\n        )\r\n\r\n        return probabilityList;\r\n    }\r\n\r\n//*MAIN FUNCTION HERE...\r\n\r\nexport default function generateNewTTT(difficulty, TTTLength, priorityList) {\r\n    // console.log('generating new TTT', difficulty, TTTLength );\r\n    //check input structure\r\n    if (\r\n        typeof difficulty !== 'string' ||\r\n        typeof TTTLength !== 'number' ||\r\n        typeof priorityList !== 'object'\r\n    ) {\r\n        console.log('invalid currentSettings received by generateNewTTT');\r\n        return;\r\n    }\r\n    //apply difficulty modifiers to priorityList\r\n    const modifiedPriorityList = applyDifficulty(priorityList, difficulty);\r\n\r\n    //generate probability list\r\n    const probabilityList = [];\r\n    Object.keys(modifiedPriorityList).forEach(charCode => {\r\n        for (let i = 0; i<= modifiedPriorityList[charCode];i++){\r\n            probabilityList.push(charCode);\r\n        }\r\n    } )\r\n    //generate a random list based on the probability list and settings:\r\n    let nextTTT = [];\r\n\r\n    //Moke sure space ' ' character doesn't appear twice in a row\r\n    ///and make sure space character isn't the first character\r\n    //and make sure there is a space character at least evere 'x' characters\r\n    const maxWordLength = 8;\r\n    let currentWordLength = 0;\r\n    let lastChar = '';\r\n    let newChar = '';\r\n    while (TTTLength--){\r\n        newChar = getNewRandomCharacter(probabilityList);\r\n        if(currentWordLength > maxWordLength) {newChar = '32'; currentWordLength = 0};\r\n        while ((lastChar === '32' && newChar === '32') || (lastChar === '' && newChar === '32')) {\r\n            newChar = getNewRandomCharacter(probabilityList);\r\n        }\r\n        currentWordLength ++;\r\n        //convert space to open box\r\n        nextTTT.push(String.fromCharCode(newChar));\r\n        // nextTTT.push((newChar=== '32')?\"\\u2423\":String.fromCharCode(newChar));\r\n        lastChar = newChar;\r\n    }\r\n\r\n    //return type is list of string characters\r\n\r\nreturn nextTTT;\r\n    \r\n}","import React, {useState, useContext, useCallback, useEffect} from 'react';\r\nimport { TypingInputContext } from './TypingInputContext';\r\nimport { TypingStatsContext } from './TypingStatsContext';\r\nimport {TypingSettingsContext} from './TypingSettingsContext';\r\nimport {getPriorityList} from '../../lib/trainingModeUtils';\r\nimport generateNewTTT from '../../lib/generateNewTTT';\r\n\r\n//initialize state structure here\r\nexport const CurrentTTTContext = React.createContext({\r\n    currentTTT: [],\r\n    newTTT: ()=> {},\r\n\r\n});\r\n\r\n\r\nexport default function CurrentTTTProvider({children}) {\r\nconst typingSettingsContext = useContext(TypingSettingsContext);\r\nconst typingInputContext = useContext(TypingInputContext);\r\nconst newTTT = useCallback(() => {\r\n    const newTTT = generateNewTTT(typingSettingsContext.difficulty, typingSettingsContext.TTTLength, getPriorityList());\r\n    // console.log('newTTT, ',newTTT);\r\n    //update the parent components\r\n    typingInputContext.getCurrentTTT(newTTT);\r\n    setCurrentTTT(newTTT); \r\n},[typingSettingsContext.difficulty, typingSettingsContext.TTTLength, typingInputContext]);\r\nconst initialNewTTT = useCallback(() => {\r\n    // console.log('initial currentTTT State');\r\n    return generateNewTTT(typingSettingsContext.difficulty, typingSettingsContext.TTTLength, getPriorityList());\r\n},[typingSettingsContext.difficulty, typingSettingsContext.TTTLength]);\r\nconst [currentTTT, setCurrentTTT] = useState(initialNewTTT);\r\n\r\n//on initial render , update the parent context\r\nuseEffect (()=> {\r\n    typingInputContext.getCurrentTTT(currentTTT);\r\n},[])\r\n\r\n\r\nreturn (\r\n    <CurrentTTTContext.Provider \r\n        value={{\r\n            currentTTT: currentTTT,\r\n            newTTT: newTTT,\r\n        }}\r\n    >\r\n        {children}\r\n    </CurrentTTTContext.Provider>\r\n);\r\n}\r\n","import React, {useState, useEffect, useContext, useRef} from 'react';\r\nimport TTTCharacter from './TTTCharacter'\r\nimport {TypingInputContext} from './providers/TypingInputContext'\r\nimport {TypingSettingsContext} from './providers/TypingSettingsContext'\r\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\r\nimport { CurrentTTTContext } from './providers/CurrentTTTContext';\r\n\r\nlet prevPauseTrigger = null;\r\nexport default function TypingArea(props) {\r\n\r\nconst typingSettingsContext = useContext(TypingSettingsContext);\r\nconst typingInputContext = useContext(TypingInputContext);\r\nconst currentTTT = useContext(CurrentTTTContext);\r\nconst hiddenInputRef = useRef();\r\nconst [pauseOverlayDisplay, setPauseOverlayDisplay] = useState('none');\r\nconst [finishedOverlayDisplay, setFinishedOverlayDisplay] = useState('none');\r\n\r\n//when unpaused focus the hidden input\r\nuseEffect(\r\n   () => {\r\n       if (typingInputContext.isPaused === false) {\r\n        hiddenInputRef.current.focus();\r\n        //also change display of pauseOverlay\r\n        setPauseOverlayDisplay('none');\r\n       }\r\n       if (typingInputContext.isPaused === true) {\r\n           setPauseOverlayDisplay('block');\r\n       }\r\n   }, [typingInputContext.isPaused, hiddenInputRef]\r\n)\r\n\r\n//on initial render, focus the hidden input\r\nuseEffect(\r\n    () => {\r\n        document.activeElement.blur();\r\n        hiddenInputRef.current.focus();\r\n    }, []\r\n)\r\n\r\n//when pauseTrigger changes, send a unpause event\r\nuseEffect(()=> {\r\n    if (prevPauseTrigger === props.pauseTrigger) return;\r\n    typingInputContext.unPause();\r\n    prevPauseTrigger = props.pauseTrigger;\r\n}, [props.pauseTrigger, typingInputContext])\r\n\r\n//when ttt is finished...\r\nuseEffect(()=> {\r\n    if (typingInputContext.currentTTTStatus !== 'finished') return;\r\n    setFinishedOverlayDisplay('block');\r\n},[typingInputContext.currentTTTStatus])\r\n\r\nreturn (\r\n    <ClickAwayListener onClickAway={() => typingInputContext.pause()}>\r\n\r\n    <div className={'typingAreaContainer'}>\r\n    <div onKeyDown={typingInputContext.handleKeyDown} >\r\n        \r\n        {currentTTT.currentTTT?\r\n        currentTTT.currentTTT.map((char, index) => <TTTCharacter char={char} index={index} key={'tttchar'+index} className={typingInputContext.colorList.bg[index]+' '+typingInputContext.colorList.text[index]}/>)\r\n        :null}\r\n\r\n      \r\n    <div>\r\n      <input \r\n        id=\"hiddenInput\" \r\n        type=\"text\" \r\n        value={typingInputContext.hiddenInputVal} \r\n        className=\"hiddenInput\" \r\n        style={{opacity: 0}} \r\n        onChange={typingInputContext.handleInput}\r\n        onBlur={typingInputContext.pause} \r\n        onFocus={typingInputContext.unPause}\r\n        disabled={typingInputContext.isPaused}\r\n        ref={hiddenInputRef}\r\n        />\r\n    </div>\r\n    </div>\r\n    <div className=\"pauseOverlay\"  style={{display: pauseOverlayDisplay}} onClick={typingInputContext.unPause}>\r\n        <div className=\"pauseOverlayText\" >Paused. Press Esc to unpause.</div>\r\n    </div>\r\n    <div className='finishedOverlay' style={{display: finishedOverlayDisplay}} onClick={()=> {setFinishedOverlayDisplay('none')}}>\r\n        <div className='finishedOverlayText'>Finished!</div>\r\n    </div>\r\n    </div>\r\n    </ClickAwayListener>\r\n);\r\n}\r\n","import React, {useState, useEffect, useContext} from 'react';\r\nimport { TypingStatsContext } from './providers/TypingStatsContext';\r\nimport { CurrentTTTContext } from './providers/CurrentTTTContext';\r\nimport { TypingInputContext } from './providers/TypingInputContext';\r\nimport Button from '@material-ui/core/Button'\r\n\r\nexport default function StatsArea(props) {\r\n\r\nconst typingStatsContext = useContext(TypingStatsContext);\r\nconst currentTTT = useContext(CurrentTTTContext);\r\nconst statsContext = useContext(TypingStatsContext);\r\nconst inputContext = useContext(TypingInputContext);\r\n\r\nreturn (\r\n<>\r\n    <p><b>{typingStatsContext.WPM}</b> wpm</p>\r\n    <p><b>{Math.round(typingStatsContext.accuracy)}%</b> accuracy</p>\r\n    <p><b>{Math.round(typingStatsContext.wastedKeysPercentage)}%</b> keystrokes wasted </p>\r\n    <p>Slowest character: <b>{typingStatsContext.getWorstChar()}</b></p>\r\n    <button className=\"newTTTButton\" onClick={async () => {\r\n        await currentTTT.newTTT();\r\n        await statsContext.newTTTReset();\r\n        await inputContext.newTTTReset();\r\n        inputContext.unPause();\r\n        console.log('finished resetting and generating a new TTT')\r\n    }}>Reset Text</button>\r\n</>\r\n);\r\n}\r\n","\r\n// code taken from https://www.digitalocean.com/community/tutorials/react-tabs-component\r\n\r\nimport React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Tab extends Component {\r\n  static propTypes = {\r\n    activeTab: PropTypes.string.isRequired,\r\n    label: PropTypes.string.isRequired,\r\n    onClick: PropTypes.func.isRequired,\r\n  };\r\n\r\n  onClick = () => {\r\n    const { label, onClick } = this.props;\r\n    onClick(label);\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      onClick,\r\n      props: {\r\n        activeTab,\r\n        label,\r\n      },\r\n    } = this;\r\n\r\n    let className = 'tab-list-item';\r\n\r\n    if (activeTab === label) {\r\n      className += ' tab-list-active';\r\n    }\r\n\r\n    return (\r\n      <li\r\n        className={className}\r\n        onClick={onClick}\r\n      >\r\n        {label}\r\n      </li>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Tab;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Tab from './Tab';\r\n\r\n//code taken from https://www.digitalocean.com/community/tutorials/react-tabs-component\r\n\r\nclass Tabs extends Component {\r\n  static propTypes = {\r\n    children: PropTypes.instanceOf(Array).isRequired,\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      activeTab: this.props.children[0].props.label,\r\n    };\r\n  }\r\n\r\n  onClickTabItem = (tab) => {\r\n    this.setState({ activeTab: tab });\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      onClickTabItem,\r\n      props: {\r\n        children,\r\n      },\r\n      state: {\r\n        activeTab,\r\n      }\r\n    } = this;\r\n\r\n    return (\r\n      <div className=\"tabs\">\r\n        <ol className=\"tab-list\">\r\n          {children.map((child) => {\r\n            const { label } = child.props;\r\n\r\n            return (\r\n              <Tab\r\n                activeTab={activeTab}\r\n                key={label}\r\n                label={label}\r\n                onClick={onClickTabItem}\r\n              />\r\n            );\r\n          })}\r\n        </ol>\r\n        <div className=\"tab-content\">\r\n          {children.map((child) => {\r\n            if (child.props.label !== activeTab) return undefined;\r\n            return child.props.children;\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Tabs;","import React, {useState, useContext, useCallback} from 'react';\r\nimport { TypingSettingsContext } from './providers/TypingSettingsContext';\r\nimport { TypingInputContext } from './providers/TypingInputContext';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport { CurrentTTTContext } from './providers/CurrentTTTContext';\r\nimport Tabs from './Tabs';\r\nimport PropTypes from 'prop-types';\r\nimport { sizing } from '@material-ui/system';\r\nimport Box from '@material-ui/core/Box'\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\n\r\n  function a11yProps(index) {\r\n    return {\r\n      id: `settings-${index}`,\r\n      'aria-controls': `settings-${index}`,\r\n    };\r\n  }\r\n\r\nconst difficultySliderMarks = [\r\n    {value: 0,\r\n    label: 'Easy'},\r\n    {value: 1,\r\n    label: 'Medium'},\r\n    {value: 2,\r\n    label: 'Hard'},\r\n    {value: 3,\r\n    label: 'Very Hard'}\r\n]\r\nconst autoPauseSliderMarks = [\r\n    {value: 3000,\r\n    label: '3s'},\r\n    {value: 5000,\r\n    label: '5s'},\r\n    {value: 10000,\r\n    label: '10s'},\r\n    {value: 15000,\r\n    label: '15s'},\r\n]\r\nconst TTTLengthSliderMarks = [\r\n    {value: 20,\r\n    label: '20'},\r\n    {value: 100,\r\n    label: '100'},\r\n    {value: 200,\r\n    label: '200'},\r\n    {value: 300,\r\n    label: '300'},\r\n]\r\n\r\n//for material-ui sliders...\r\nfunction valuetext(value) {\r\n    return `${value}`;\r\n}\r\nconst useStyles = makeStyles({\r\n    root: {\r\n    //   maxHeight: 5,\r\n    //   padding: '1.8em',\r\n      width: '70%',\r\n      overflow: 'visible',\r\n    },\r\n    // content: {\r\n    //     maxHeight: 5,\r\n\r\n    // },\r\n    markLabel: {\r\n        top: '75%',\r\n        overflow: 'visible',\r\n    },\r\n    track: {\r\n        backgroundColor:'#F77F00',\r\n        height: '4px',\r\n    },\r\n    thumb: {\r\n        backgroundColor: '#D90368',\r\n        height: '13px',\r\n        '&:hover': {\r\n            boxShadow: '0px 0px 0px 8px rgba(217, 3, 104, 0.16)',\r\n        }\r\n    },\r\n    rail: {\r\n        backgroundColor:'rgba(247, 127, 0, 0.4)',\r\n        height: '4px',\r\n    },\r\n    mark: {\r\n        backgroundColor: '#F77F00',\r\n        height: '4px',\r\n    }\r\n  });\r\n\r\nexport default function SettingsArea(props) {\r\nconst typingSettingsContext = useContext(TypingSettingsContext);\r\nconst typingInputContext = useContext(TypingInputContext);\r\nconst [value, setValue] = useState(0);\r\nconst handleChange = useCallback((event, newValue) => {\r\n    setValue(newValue);\r\n},[]);\r\nconst classes = useStyles();\r\n\r\nreturn (\r\n<div >\r\n    <div className=\"settingsTitle\">Settings:</div>\r\n    <Tabs>\r\n      <div className=\"autoPauseSelector slider\" label=\"Auto Pause Time\">\r\n        <Slider\r\n            classes={{\r\n                root: classes.root,\r\n                // content: classes.content,\r\n                markLabel: classes.markLabel,\r\n                track: classes.track,\r\n                thumb: classes.thumb,\r\n                rail: classes.rail,\r\n                mark: classes.mark,\r\n            }}\r\n            defaultValue={10000}\r\n            getAriaValueText={valuetext}\r\n            aria-labelledby=\"difficulty-slider\"\r\n            step={1000}\r\n            max={15000}\r\n            min={2000}\r\n            valueLabelDisplay=\"off\"\r\n            marks={autoPauseSliderMarks}\r\n            onChange={typingInputContext.changeAutoPauseTime}\r\n        />\r\n      </div>\r\n      <div className=\"difficultySelector slider\" label=\"Difficulty\">\r\n        <Slider\r\n            classes={{\r\n                root: classes.root,\r\n                // content: classes.content,\r\n                markLabel: classes.markLabel,\r\n                track: classes.track,\r\n                thumb: classes.thumb,\r\n                rail: classes.rail,\r\n                mark: classes.mark,\r\n            }}\r\n            defaultValue={0}\r\n            getAriaValueText={valuetext}\r\n            aria-labelledby=\"difficulty-slider\"\r\n            step={1}\r\n            max={3}\r\n            valueLabelDisplay=\"off\"\r\n            marks={difficultySliderMarks}\r\n            onChange={typingSettingsContext.changeDifficulty}\r\n        />\r\n      </div>\r\n      <div className=\"TTTLengthSelector slider\" label=\"Text Length\">\r\n        <Slider\r\n            classes={{\r\n                root: classes.root,\r\n                // content: classes.content,\r\n                markLabel: classes.markLabel,\r\n                track: classes.track,\r\n                thumb: classes.thumb,\r\n                rail: classes.rail,\r\n                mark: classes.mark,\r\n            }}\r\n            defaultValue={150}\r\n            getAriaValueText={valuetext}\r\n            aria-labelledby=\"text-length-slider\"\r\n            step={10}\r\n            max={400}\r\n            min={20}\r\n            valueLabelDisplay=\"off\"\r\n            marks={TTTLengthSliderMarks}\r\n            onChange={(e,val)=>{typingSettingsContext.setTTTLength(val);}}\r\n        />\r\n      </div>\r\n    </Tabs>\r\n</div>\r\n);\r\n}\r\n","import React, {useState, useEffect, useContext} from 'react';\r\n\r\nexport default function Header(props) {\r\n\r\nreturn (\r\n    <div className={props.className}>\r\n    <h1 className=\"title\">T-Y-P-E Demo</h1>\r\n    <h3>A hardcore typing speed app for programmers.</h3>\r\n    <a href=\"https://sheldonfrith.com\"><button className=\"actionButton\">By Sheldon Frith</button></a>\r\n    <a href=\"https://github.com/Sheldonfrith/t-y-p-e-demo\"><button className=\"gitHubButton\">View on GitHub</button></a>\r\n    </div>\r\n);\r\n}\r\n","import React, {useState} from 'react';\nimport '../styles/App.css';\nimport TypingSettingsProvider from './providers/TypingSettingsContext'\nimport TypingInputProvider from './providers/TypingInputContext'\nimport TypingStatsProvider from './providers/TypingStatsContext'\nimport TypingArea from './TypingArea'\nimport StatsArea from './StatsArea'\nimport SettingsArea from './SettingsArea'\nimport Paper from '@material-ui/core/Paper'\nimport CurrentTTTProvider from './providers/CurrentTTTContext';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Header from './Header'\n\nconst useStyles = makeStyles({\n  root: {\n    backgroundColor: '#F6F7EB',\n  },\n});\n\nfunction App() {\n\n  const [triggerTypingPause, setTriggerTypingPause] = useState(null);\n  const handleGlobalKeyDown = (event) => {\n    // if escape key pressed fire un-pause event\n    if (event.key === 'Escape'){\n      setTriggerTypingPause(prev => prev+1);\n    }\n  }\n  const classes = useStyles();\n\n  return (\n    <div  onKeyDown={handleGlobalKeyDown} tabIndex={-1}>\n    <div className=\"App\">\n      <Header className=\"App-header\"/>\n      <TypingSettingsProvider>\n      <TypingStatsProvider>\n      <TypingInputProvider>\n      <CurrentTTTProvider>\n        <Paper elevation={3} className={'typingArea'} classes={{root:classes.root}}>\n          <TypingArea pauseTrigger={triggerTypingPause}/>\n        </Paper>\n        <Paper elevation={2} className={'statsArea'} classes={{root:classes.root}}>\n          <StatsArea/>\n        </Paper>\n        <Paper elevation={2} className={'settingsArea'} classes={{root:classes.root}}>\n          <SettingsArea/>\n        </Paper>\n      </CurrentTTTProvider>\n      </TypingInputProvider>\n      </TypingStatsProvider>\n      </TypingSettingsProvider>\n    </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'normalize.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}